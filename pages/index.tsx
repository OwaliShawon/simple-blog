import { Divider, Row, Spin } from 'antd';
import 'antd/dist/antd.css';
import Head from 'next/head';
import Post from '../components/Post';
import { useAppDispatch, useAppSelector } from '../rtk/app/hooke';
import fetchPosts from '../rtk/thunk/fetchPostThunk';
import styles from '../styles/Home.module.css';

export default function Home() {
  const dispatch = useAppDispatch();
  const posts = useAppSelector((state) => state.posts.value);
  const isLoading = useAppSelector((state) => state.posts.loading);
  // only fetch posts if there are none
  if(!posts.length) {
    dispatch(fetchPosts());
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Simple Blog App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    {
      isLoading &&  <div className="spinner">
      <Spin />
    </div>
    }
      <main className={styles.main}>
        <Divider>All Blogs</Divider>
        <Row justify="space-evenly" align="top">
            {
              posts.map((post: any) => <Post key={post.id} post={post}></Post>)
            }
        </Row> 
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}

// // This gets called on every request
// export async function getServerSideProps() {
//   // Fetch data from external API
//   const resPosts = await fetch(
//     `https://jsonplaceholder.typicode.com/posts?_limit=20`
//   );
//   const resComments = await fetch(
//     `https://jsonplaceholder.typicode.com/comments`
//   );
//   const resUsers = await fetch(`https://jsonplaceholder.typicode.com/users`);

//   const posts: any = await resPosts.json();
//   const comments: any = await resComments.json();
//   const users: any = await resUsers.json();

//     // filtering posts by userId and related comments
//     const postsWithComments: any = posts.map((post: any) => {
//       return {
//         ...post,
//         comments: comments.filter((comment: any) => comment.postId === post.id),
//         author: users.find((user: any) => user.id === post.userId),
//       };
//     });

//   // Pass data to the page via props
//   return { props: { postsWithComments } };
// }
